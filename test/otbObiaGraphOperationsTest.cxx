#include "otbObiaGraphOperations.h"

using namespace otb::obia;

int otbObiaGraphOperationsTest(int argc, char *argv[])
{
	// Testing graph
	int ImageWidth = 10;
	using NodeType = Node< DummyGraphAttribute, DummyGraphAttribute>;
	using GraphType = Graph<NodeType>;
	using GraphOperationsType = GraphOperations<GraphType>;
	GraphType::Pointer graph = GraphType::New();
	graph->SetImageWidth(10);
	graph->SetImageHeight(10);
	graph->SetNumberOfSpectralBands(3);
	graph->SetOriginX(0);
	graph->SetOriginY(0);

	auto node_00 = graph->AddNode();
	int pos = 0;
	node_00->m_Id = 0;
	node_00->m_BoundingBox[0] = pos % ImageWidth;
	node_00->m_BoundingBox[1] = pos / 10;
	node_00->m_BoundingBox[2] = 1;
	node_00->m_BoundingBox[3] = 1;
	Contour cont_00 = Contour();
	cont_00.SetStartingCoords(pos);
	cont_00.AddMove(Contour::Move::RIGHT); cont_00.AddMove(Contour::Move::RIGHT); cont_00.AddMove(Contour::Move::RIGHT);
	cont_00.AddMove(Contour::Move::DOWN); cont_00.AddMove(Contour::Move::LEFT); cont_00.AddMove(Contour::Move::DOWN);
	cont_00.AddMove(Contour::Move::LEFT); cont_00.AddMove(Contour::Move::DOWN); cont_00.AddMove(Contour::Move::LEFT);
	cont_00.AddMove(Contour::Move::UP); cont_00.AddMove(Contour::Move::UP); cont_00.AddMove(Contour::Move::UP);
	node_00->m_Contour = cont_00;
	auto edge_00_1 = node_00->AddEdge();
	edge_00_1->m_TargetId = 1; edge_00_1->m_Boundary = 3;
	auto edge_00_2 = node_00->AddEdge();
	edge_00_2->m_TargetId = 4; edge_00_2->m_Boundary = 3;

	auto node_01 = graph->AddNode();
	pos = 3;
	node_01->m_Id = 1;
	node_01->m_BoundingBox[0] = pos % ImageWidth;
	node_01->m_BoundingBox[1] = pos / 10;
	node_01->m_BoundingBox[2] = 1;
	node_01->m_BoundingBox[3] = 1;
	Contour cont_01 = Contour();
	cont_01.SetStartingCoords(pos);
	cont_01.AddMove(Contour::Move::RIGHT); cont_01.AddMove(Contour::Move::DOWN); cont_01.AddMove(Contour::Move::DOWN);
	cont_01.AddMove(Contour::Move::DOWN); cont_01.AddMove(Contour::Move::LEFT); cont_01.AddMove(Contour::Move::LEFT);
	cont_01.AddMove(Contour::Move::UP); cont_01.AddMove(Contour::Move::UP); cont_01.AddMove(Contour::Move::RIGHT);
	cont_01.AddMove(Contour::Move::UP);
	node_01->m_Contour = cont_01;
	auto edge_01_1 = node_01->AddEdge();
	edge_01_1->m_TargetId = 0; edge_01_1->m_Boundary = 3;
	auto edge_01_2 = node_01->AddEdge();
	edge_01_2->m_TargetId = 2; edge_01_2->m_Boundary = 2;
	auto edge_01_3 = node_01->AddEdge();
	edge_01_3->m_TargetId = 4; edge_01_3->m_Boundary = 2;
	auto edge_01_4 = node_01->AddEdge();
	edge_01_4->m_TargetId = 5; edge_01_4->m_Boundary = 2;

	auto node_02 = graph->AddNode();
	pos = 4;
	node_02->m_Id = 2;
	node_02->m_BoundingBox[0] = pos % ImageWidth;
	node_02->m_BoundingBox[1] = pos / 10;
	node_02->m_BoundingBox[2] = 1;
	node_02->m_BoundingBox[3] = 1;
	Contour cont_02 = Contour();
	cont_02.SetStartingCoords(pos);
	cont_02.AddMove(Contour::Move::RIGHT); cont_02.AddMove(Contour::Move::RIGHT); cont_02.AddMove(Contour::Move::RIGHT);
	cont_02.AddMove(Contour::Move::RIGHT); cont_02.AddMove(Contour::Move::DOWN); cont_02.AddMove(Contour::Move::DOWN);
	cont_02.AddMove(Contour::Move::DOWN); cont_02.AddMove(Contour::Move::DOWN); cont_02.AddMove(Contour::Move::LEFT);
	cont_02.AddMove(Contour::Move::LEFT); cont_02.AddMove(Contour::Move::UP); cont_02.AddMove(Contour::Move::UP);
	cont_02.AddMove(Contour::Move::LEFT); cont_02.AddMove(Contour::Move::LEFT); cont_02.AddMove(Contour::Move::UP);
	cont_02.AddMove(Contour::Move::UP);
	node_02->m_Contour = cont_02;
	auto edge_02_1 = node_02->AddEdge();
	edge_02_1->m_TargetId = 1; edge_02_1->m_Boundary = 2;
	auto edge_02_2 = node_02->AddEdge();
	edge_02_2->m_TargetId = 3; edge_02_2->m_Boundary = 2;
	auto edge_02_3 = node_02->AddEdge();
	edge_02_3->m_TargetId = 5; edge_02_3->m_Boundary = 5;
	auto edge_02_4 = node_02->AddEdge();
	edge_02_4->m_TargetId = 6; edge_02_4->m_Boundary = 3;

	auto node_03 = graph->AddNode();
	pos = 8;
	node_03->m_Id = 3;
	node_03->m_BoundingBox[0] = pos % ImageWidth;
	node_03->m_BoundingBox[1] = pos / 10;
	node_03->m_BoundingBox[2] = 1;
	node_03->m_BoundingBox[3] = 1;
	Contour cont_03 = Contour();
	cont_03.SetStartingCoords(pos);
	cont_03.AddMove(Contour::Move::RIGHT); cont_03.AddMove(Contour::Move::RIGHT); cont_03.AddMove(Contour::Move::DOWN);
	cont_03.AddMove(Contour::Move::DOWN); cont_03.AddMove(Contour::Move::DOWN); cont_03.AddMove(Contour::Move::LEFT);
	cont_03.AddMove(Contour::Move::UP); cont_03.AddMove(Contour::Move::LEFT); cont_03.AddMove(Contour::Move::UP);
	cont_03.AddMove(Contour::Move::UP);
	node_03->m_Contour = cont_03;
	auto edge_03_1 = node_03->AddEdge();
	edge_03_1->m_TargetId = 2; edge_03_1->m_Boundary = 2;
	auto edge_03_2 = node_03->AddEdge();
	edge_03_2->m_TargetId = 6; edge_03_2->m_Boundary = 3;

	auto node_04 = graph->AddNode();
	pos = 21;
	node_04->m_Id = 4;
	node_04->m_BoundingBox[0] = pos % ImageWidth;
	node_04->m_BoundingBox[1] = pos / 10;
	node_04->m_BoundingBox[2] = 1;
	node_04->m_BoundingBox[3] = 1;
	Contour cont_04 = Contour();
	cont_04.SetStartingCoords(pos);
	cont_04.AddMove(Contour::Move::RIGHT); cont_04.AddMove(Contour::Move::DOWN); cont_04.AddMove(Contour::Move::RIGHT);
	cont_04.AddMove(Contour::Move::DOWN); cont_04.AddMove(Contour::Move::DOWN); cont_04.AddMove(Contour::Move::LEFT);
	cont_04.AddMove(Contour::Move::LEFT); cont_04.AddMove(Contour::Move::LEFT); cont_04.AddMove(Contour::Move::UP);
	cont_04.AddMove(Contour::Move::UP); cont_04.AddMove(Contour::Move::RIGHT); cont_04.AddMove(Contour::Move::UP);
	node_04->m_Contour = cont_04;
	auto edge_04_1 = node_04->AddEdge();
	edge_04_1->m_TargetId = 0; edge_04_1->m_Boundary = 3;
	auto edge_04_2 = node_04->AddEdge();
	edge_04_2->m_TargetId = 1; edge_04_2->m_Boundary = 2;
	auto edge_04_3 = node_04->AddEdge();
	edge_04_3->m_TargetId = 5; edge_04_3->m_Boundary = 1;
	auto edge_04_4 = node_04->AddEdge();
	edge_04_4->m_TargetId = 7; edge_04_4->m_Boundary = 2;
	auto edge_04_5 = node_04->AddEdge();
	edge_04_5->m_TargetId = 8; edge_04_5->m_Boundary = 2;

	auto node_05 = graph->AddNode();
	pos = 24;
	node_05->m_Id = 5;
	node_05->m_BoundingBox[0] = pos % ImageWidth;
	node_05->m_BoundingBox[1] = pos / 10;
	node_05->m_BoundingBox[2] = 1;
	node_05->m_BoundingBox[3] = 1;
	Contour cont_05 = Contour();
	cont_05.SetStartingCoords(pos);
	cont_05.AddMove(Contour::Move::RIGHT); cont_05.AddMove(Contour::Move::RIGHT); cont_05.AddMove(Contour::Move::DOWN);
	cont_05.AddMove(Contour::Move::DOWN); cont_05.AddMove(Contour::Move::RIGHT); cont_05.AddMove(Contour::Move::DOWN);
	cont_05.AddMove(Contour::Move::LEFT); cont_05.AddMove(Contour::Move::LEFT); cont_05.AddMove(Contour::Move::LEFT);
	cont_05.AddMove(Contour::Move::UP); cont_05.AddMove(Contour::Move::LEFT); cont_05.AddMove(Contour::Move::UP);
	cont_05.AddMove(Contour::Move::RIGHT); cont_05.AddMove(Contour::Move::UP);
	node_05->m_Contour = cont_05;
	auto edge_05_1 = node_05->AddEdge();
	edge_05_1->m_TargetId = 1; edge_05_1->m_Boundary = 2;
	auto edge_05_2 = node_05->AddEdge();
	edge_05_2->m_TargetId = 2; edge_05_2->m_Boundary = 5;
	auto edge_05_3 = node_05->AddEdge();
	edge_05_3->m_TargetId = 6; edge_05_3->m_Boundary = 1;
	auto edge_05_4 = node_05->AddEdge();
	edge_05_4->m_TargetId = 7; edge_05_4->m_Boundary = 4;
	auto edge_05_5 = node_05->AddEdge();
	edge_05_5->m_TargetId = 9; edge_05_5->m_Boundary = 1;

	auto node_06 = graph->AddNode();
	pos = 28;
	node_06->m_Id = 6;
	node_06->m_BoundingBox[0] = pos % ImageWidth;
	node_06->m_BoundingBox[1] = pos / 10;
	node_06->m_BoundingBox[2] = 1;
	node_06->m_BoundingBox[3] = 1;
	Contour cont_06 = Contour();
	cont_06.SetStartingCoords(pos);
	cont_06.AddMove(Contour::Move::RIGHT); cont_06.AddMove(Contour::Move::DOWN); cont_06.AddMove(Contour::Move::RIGHT);
	cont_06.AddMove(Contour::Move::DOWN); cont_06.AddMove(Contour::Move::DOWN); cont_06.AddMove(Contour::Move::LEFT);
	cont_06.AddMove(Contour::Move::DOWN); cont_06.AddMove(Contour::Move::LEFT); cont_06.AddMove(Contour::Move::UP);
	cont_06.AddMove(Contour::Move::LEFT); cont_06.AddMove(Contour::Move::UP); cont_06.AddMove(Contour::Move::RIGHT);
	cont_06.AddMove(Contour::Move::UP); cont_06.AddMove(Contour::Move::UP);
	node_06->m_Contour = cont_06;
	auto edge_06_1 = node_06->AddEdge();
	edge_06_1->m_TargetId = 2; edge_06_1->m_Boundary = 3;
	auto edge_06_2 = node_06->AddEdge();
	edge_06_2->m_TargetId = 3; edge_06_2->m_Boundary = 3;
	auto edge_06_3 = node_06->AddEdge();
	edge_06_3->m_TargetId = 5; edge_06_3->m_Boundary = 1;
	auto edge_06_4 = node_06->AddEdge();
	edge_06_4->m_TargetId = 9; edge_06_4->m_Boundary = 2;
	auto edge_06_5 = node_06->AddEdge();
	edge_06_5->m_TargetId = 10; edge_06_5->m_Boundary = 3;

	auto node_07 = graph->AddNode();
	pos = 43;
	node_07->m_Id = 7;
	node_07->m_BoundingBox[0] = pos % ImageWidth;
	node_07->m_BoundingBox[1] = pos / 10;
	node_07->m_BoundingBox[2] = 1;
	node_07->m_BoundingBox[3] = 1;
	Contour cont_07 = Contour();
	cont_07.SetStartingCoords(pos);
	cont_07.AddMove(Contour::Move::RIGHT); cont_07.AddMove(Contour::Move::DOWN); cont_07.AddMove(Contour::Move::RIGHT);
	cont_07.AddMove(Contour::Move::RIGHT); cont_07.AddMove(Contour::Move::DOWN); cont_07.AddMove(Contour::Move::DOWN);
	cont_07.AddMove(Contour::Move::LEFT); cont_07.AddMove(Contour::Move::UP); cont_07.AddMove(Contour::Move::LEFT);
	cont_07.AddMove(Contour::Move::DOWN); cont_07.AddMove(Contour::Move::LEFT); cont_07.AddMove(Contour::Move::LEFT);
	cont_07.AddMove(Contour::Move::UP); cont_07.AddMove(Contour::Move::UP); cont_07.AddMove(Contour::Move::RIGHT);
	cont_07.AddMove(Contour::Move::UP);
	node_07->m_Contour = cont_07;
	auto edge_07_1 = node_07->AddEdge();
	edge_07_1->m_TargetId = 4; edge_07_1->m_Boundary = 2;
	auto edge_07_2 = node_07->AddEdge();
	edge_07_2->m_TargetId = 5; edge_07_2->m_Boundary = 4;
	auto edge_07_3 = node_07->AddEdge();
	edge_07_3->m_TargetId = 8; edge_07_3->m_Boundary = 3;
	auto edge_07_4 = node_07->AddEdge();
	edge_07_4->m_TargetId = 9; edge_07_4->m_Boundary = 7;

	auto node_08 = graph->AddNode();
	pos = 50;
	node_08->m_Id = 8;
	node_08->m_BoundingBox[0] = pos % ImageWidth;
	node_08->m_BoundingBox[1] = pos / 10;
	node_08->m_BoundingBox[2] = 1;
	node_08->m_BoundingBox[3] = 1;
	Contour cont_08 = Contour();
	cont_08.SetStartingCoords(pos);
	cont_08.AddMove(Contour::Move::RIGHT); cont_08.AddMove(Contour::Move::RIGHT); cont_08.AddMove(Contour::Move::DOWN);
	cont_08.AddMove(Contour::Move::DOWN); cont_08.AddMove(Contour::Move::RIGHT); cont_08.AddMove(Contour::Move::DOWN);
	cont_08.AddMove(Contour::Move::LEFT); cont_08.AddMove(Contour::Move::LEFT); cont_08.AddMove(Contour::Move::LEFT);
	cont_08.AddMove(Contour::Move::UP); cont_08.AddMove(Contour::Move::UP); cont_08.AddMove(Contour::Move::UP);
	node_08->m_Contour = cont_08;
	auto edge_08_1 = node_08->AddEdge();
	edge_08_1->m_TargetId = 4; edge_08_1->m_Boundary = 2;
	auto edge_08_2 = node_08->AddEdge();
	edge_08_2->m_TargetId = 7; edge_08_2->m_Boundary = 3;
	auto edge_08_3 = node_08->AddEdge();
	edge_08_3->m_TargetId = 10; edge_08_3->m_Boundary = 1;
	auto edge_08_4 = node_08->AddEdge();
	edge_08_4->m_TargetId = 11; edge_08_4->m_Boundary = 3;

	auto node_09 = graph->AddNode();
	pos = 56;
	node_09->m_Id = 9;
	node_09->m_BoundingBox[0] = pos % ImageWidth;
	node_09->m_BoundingBox[1] = pos / 10;
	node_09->m_BoundingBox[2] = 1;
	node_09->m_BoundingBox[3] = 1;
	Contour cont_09 = Contour();
	cont_09.SetStartingCoords(pos);
	cont_09.AddMove(Contour::Move::RIGHT); cont_09.AddMove(Contour::Move::RIGHT); cont_09.AddMove(Contour::Move::DOWN);
	cont_09.AddMove(Contour::Move::DOWN); cont_09.AddMove(Contour::Move::LEFT); cont_09.AddMove(Contour::Move::DOWN);
	cont_09.AddMove(Contour::Move::LEFT); cont_09.AddMove(Contour::Move::DOWN); cont_09.AddMove(Contour::Move::LEFT);
	cont_09.AddMove(Contour::Move::UP); cont_09.AddMove(Contour::Move::LEFT); cont_09.AddMove(Contour::Move::DOWN);
	cont_09.AddMove(Contour::Move::LEFT); cont_09.AddMove(Contour::Move::UP); cont_09.AddMove(Contour::Move::UP);
	cont_09.AddMove(Contour::Move::LEFT); cont_09.AddMove(Contour::Move::UP); cont_09.AddMove(Contour::Move::LEFT);
	cont_09.AddMove(Contour::Move::DOWN); cont_09.AddMove(Contour::Move::RIGHT); cont_09.AddMove(Contour::Move::UP);
	cont_09.AddMove(Contour::Move::UP);
	node_09->m_Contour = cont_09;
	auto edge_09_1 = node_09->AddEdge();
	edge_09_1->m_TargetId = 5; edge_09_1->m_Boundary = 1;
	auto edge_09_2 = node_09->AddEdge();
	edge_09_2->m_TargetId = 6; edge_09_2->m_Boundary = 2;
	auto edge_09_3 = node_09->AddEdge();
	edge_09_3->m_TargetId = 7; edge_09_3->m_Boundary = 7;
	auto edge_09_4 = node_09->AddEdge();
	edge_09_4->m_TargetId = 8; edge_09_4->m_Boundary = 1;
	auto edge_09_5 = node_09->AddEdge();
	edge_09_5->m_TargetId = 10; edge_09_5->m_Boundary = 3;
	auto edge_09_6 = node_09->AddEdge();
	edge_09_6->m_TargetId = 11; edge_09_6->m_Boundary = 5;
	auto edge_09_7 = node_09->AddEdge();
	edge_09_7->m_TargetId = 12; edge_09_7->m_Boundary = 3;

	auto node_10 = graph->AddNode();
	pos = 59;
	node_10->m_Id = 10;
	node_10->m_BoundingBox[0] = pos % ImageWidth;
	node_10->m_BoundingBox[1] = pos / 10;
	node_10->m_BoundingBox[2] = 1;
	node_10->m_BoundingBox[3] = 1;
	Contour cont_10 = Contour();
	cont_10.SetStartingCoords(pos);
	cont_10.AddMove(Contour::Move::RIGHT); cont_10.AddMove(Contour::Move::DOWN); cont_10.AddMove(Contour::Move::DOWN);
	cont_10.AddMove(Contour::Move::DOWN); cont_10.AddMove(Contour::Move::DOWN); cont_10.AddMove(Contour::Move::DOWN);
	cont_10.AddMove(Contour::Move::LEFT); cont_10.AddMove(Contour::Move::UP); cont_10.AddMove(Contour::Move::UP);
	cont_10.AddMove(Contour::Move::LEFT); cont_10.AddMove(Contour::Move::LEFT); cont_10.AddMove(Contour::Move::UP);
	cont_10.AddMove(Contour::Move::RIGHT); cont_10.AddMove(Contour::Move::UP); cont_10.AddMove(Contour::Move::RIGHT);
	cont_10.AddMove(Contour::Move::UP);
	node_10->m_Contour = cont_10;
	auto edge_10_1 = node_10->AddEdge();
	edge_10_1->m_TargetId = 6; edge_10_1->m_Boundary = 3;
	auto edge_10_2 = node_10->AddEdge();
	edge_10_2->m_TargetId = 9; edge_10_2->m_Boundary = 3;
	auto edge_10_3 = node_10->AddEdge();
	edge_10_3->m_TargetId = 12; edge_10_3->m_Boundary = 4;

	auto node_11 = graph->AddNode();
	pos = 80;
	node_11->m_Id = 11;
	node_11->m_BoundingBox[0] = pos % ImageWidth;
	node_11->m_BoundingBox[1] = pos / 10;
	node_11->m_BoundingBox[2] = 1;
	node_11->m_BoundingBox[3] = 1;
	Contour cont_11 = Contour();
	cont_11.SetStartingCoords(pos);
	cont_11.AddMove(Contour::Move::RIGHT); cont_11.AddMove(Contour::Move::RIGHT); cont_11.AddMove(Contour::Move::RIGHT);
	cont_11.AddMove(Contour::Move::DOWN); cont_11.AddMove(Contour::Move::RIGHT); cont_11.AddMove(Contour::Move::UP);
	cont_11.AddMove(Contour::Move::RIGHT); cont_11.AddMove(Contour::Move::DOWN); cont_11.AddMove(Contour::Move::DOWN);
	cont_11.AddMove(Contour::Move::LEFT); cont_11.AddMove(Contour::Move::LEFT); cont_11.AddMove(Contour::Move::LEFT);
	cont_11.AddMove(Contour::Move::LEFT); cont_11.AddMove(Contour::Move::LEFT); cont_11.AddMove(Contour::Move::UP);
	cont_11.AddMove(Contour::Move::UP);
	node_11->m_Contour = cont_11;
	auto edge_11_1 = node_11->AddEdge();
	edge_11_1->m_TargetId = 8; edge_11_1->m_Boundary = 3;
	auto edge_11_2 = node_11->AddEdge();
	edge_11_2->m_TargetId = 9; edge_11_2->m_Boundary = 5;
	auto edge_11_3 = node_11->AddEdge();
	edge_11_3->m_TargetId = 12; edge_11_3->m_Boundary = 1;

	auto node_12 = graph->AddNode();
	pos = 87;
	node_12->m_Id = 12;
	node_12->m_BoundingBox[0] = pos % ImageWidth;
	node_12->m_BoundingBox[1] = pos / 10;
	node_12->m_BoundingBox[2] = 1;
	node_12->m_BoundingBox[3] = 1;
	Contour cont_12 = Contour();
	cont_12.SetStartingCoords(pos);
	cont_12.AddMove(Contour::Move::RIGHT); cont_12.AddMove(Contour::Move::RIGHT); cont_12.AddMove(Contour::Move::DOWN);
	cont_12.AddMove(Contour::Move::DOWN); cont_12.AddMove(Contour::Move::LEFT); cont_12.AddMove(Contour::Move::LEFT);
	cont_12.AddMove(Contour::Move::LEFT); cont_12.AddMove(Contour::Move::LEFT); cont_12.AddMove(Contour::Move::UP);
	cont_12.AddMove(Contour::Move::RIGHT); cont_12.AddMove(Contour::Move::RIGHT); cont_12.AddMove(Contour::Move::UP);
	node_12->m_Contour = cont_12;
	auto edge_12_1 = node_12->AddEdge();
	edge_12_1->m_TargetId = 9; edge_12_1->m_Boundary = 3;
	auto edge_12_2 = node_12->AddEdge();
	edge_12_2->m_TargetId = 10; edge_12_2->m_Boundary = 4;
	auto edge_12_3 = node_12->AddEdge();
	edge_12_3->m_TargetId = 11; edge_12_3->m_Boundary = 1;

	//Reading from disk
	std::vector<char> readSerialized;
	GraphOperationsType::ReadSerializedObjectFromDisk(readSerialized, argv[2]);

	// Serialization
	auto serialized = GraphOperationsType::SerializeGraph(graph);
	assert(serialized == readSerialized);

	// Writing to disk
	GraphOperationsType::WriteSerializedObjectToDisk(serialized, argv[1]);

	// Deserialization
	auto readGraph = GraphOperationsType::DeSerializeGraph(readSerialized);
	assert(readGraph->GetImageWidth() == 10);
	assert(readGraph->GetNumberOfNodes() == 13);

	return EXIT_SUCCESS;
}
